package khanzahmsanjungan;

import fungsi.koneksiDB;
import fungsi.validasi;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

public final class DlgCariDokter extends javax.swing.JDialog {

    private final DefaultTableModel tabMode;
    private validasi Valid = new validasi();
    private Connection koneksi = koneksiDB.condb();

    public DlgCariDokter(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Object[] row = {"Kode Dokter", "Nama Dokter", "Spesialistik", "Jam Praktek", "Jumlah Pasien", "kddokterbpjs"};
        tabMode = new DefaultTableModel(null, row);
        tbKamar.setModel(tabMode);
        tbKamar.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbKamar.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < 6; i++) {
            TableColumn column = tbKamar.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setMinWidth(0);
                column.setMaxWidth(0);
            } else if (i == 1) {
                column.setPreferredWidth(500);
            } else if (i == 2) {
                column.setPreferredWidth(300);
            } else if (i == 3) {
                column.setPreferredWidth(150);
            } else if (i == 4) {
                column.setPreferredWidth(200);
            } else if (i == 5) {
                column.setMinWidth(0);
                column.setMaxWidth(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new javax.swing.JPanel();
        Scroll = new javax.swing.JScrollPane();
        tbKamar = new widget.Table();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbKamar.setName("tbKamar"); // NOI18N
        tbKamar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbKamarMouseClicked(evt);
            }
        });
        Scroll.setViewportView(tbKamar);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbKamarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbKamarMouseClicked
        if (tabMode.getRowCount() != 0) {
            if (evt.getClickCount() == 1) {
                dispose();
            }
        }
}//GEN-LAST:event_tbKamarMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Scroll;
    private javax.swing.JPanel internalFrame1;
    private widget.Table tbKamar;
    // End of variables declaration//GEN-END:variables

    public void tampil(String harikerja, String kodepoli) {
        Valid.tabelKosong(tabMode);
        try (PreparedStatement ps = koneksi.prepareStatement(
            "select jadwal.kd_dokter, dokter.nm_dokter, spesialis.nm_sps, concat(left(jadwal.jam_mulai, 5), '-', left(jadwal.jam_selesai, 5)), " +
            "(select count(*) from reg_periksa where reg_periksa.kd_dokter = jadwal.kd_dokter and reg_periksa.kd_poli = jadwal.kd_poli and " +
            "reg_periksa.tgl_registrasi = current_date() and reg_periksa.stts != 'Batal') as jumlahdaftar, maping_dokter_dpjpvclaim.kd_dokter_bpjs " +
            "from jadwal join dokter on jadwal.kd_dokter = dokter.kd_dokter join spesialis on dokter.kd_sps = spesialis.kd_sps left join " +
            "maping_dokter_dpjpvclaim on jadwal.kd_dokter = maping_dokter_dpjpvclaim.kd_dokter where jadwal.hari_kerja = ? and " +
            "jadwal.kd_poli = ? order by jadwal.jam_mulai, dokter.nm_dokter"
        )) {
            ps.setString(1, harikerja);
            ps.setString(2, kodepoli);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    tabMode.addRow(new Object[] {rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getInt(5), rs.getString(6)});
                }
            }
        } catch (Exception e) {
            System.out.println("Notif : " + e);
        }
    }

    public JTable getTable() {
        return tbKamar;
    }
}
