/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * DlgAdmin.java
 *
 * Created on 04 Des 13, 12:59:34
 */
package registrasieksekutif;

import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import khanzahmsanjungan.DlgCariDokter;
import khanzahmsanjungan.DlgCariPoli;

/**
 *
 * @author Kode
 */
public class DlgRegistrasiEksekutif extends javax.swing.JDialog {

    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private PreparedStatement ps;
    private ResultSet rs;
    private final String URUTNOREG = koneksiDB.URUTNOREG(),
        PRINTERREGISTRASI = koneksiDB.PRINTER_REGISTRASI(),
        PRINTERBARCODE = koneksiDB.PRINTER_BARCODE(),
        KODEPOLIEKSEKUTIF = koneksiDB.KODEPOLIEKSEKUTIF(),
        JENISBAYARPOLIEKSEKUTIF = koneksiDB.JENISBAYARPOLIEKSEKUTIF();
    private String hari = "",
        regNoRawat = "",
        regNoUrut = "",
        regKodePoli = "",
        regKodeDokter = "",
        regBiaya = "",
        regStatusDaftar = "Lama",
        regStatusPoli = "Baru",
        pasienUmur = "0",
        pasienStatusUmur = "Th",
        pasienNamaPJ = "-",
        pasienHubunganPJ = "-",
        pasienAlamatPJ = "-",
        instansiNama = "",
        instansiAlamat = "",
        instansiKota = "",
        instansiKontak = "";

    private DlgCariPoli poli = new DlgCariPoli(null, true);
    private DlgCariDokter dokter = new DlgCariDokter(null, true);
    private Calendar cal = Calendar.getInstance();
    private int day = cal.get(Calendar.DAY_OF_WEEK);

    /**
     * Creates new form DlgAdmin
     *
     * @param parent
     * @param id
     */
    public DlgRegistrasiEksekutif(java.awt.Frame parent, boolean id) {
        super(parent, id);
        initComponents();

        try {
            rs = koneksi.prepareStatement("select nama_instansi, alamat_instansi, kabupaten, kontak from setting").executeQuery();

            if (rs.next()) {
                instansiNama = rs.getString("nama_instansi");
                instansiAlamat = rs.getString("alamat_instansi");
                instansiKota = rs.getString("kabupaten");
                instansiKontak = rs.getString("kontak");
            }

            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            System.out.println("Notif : " + e);
        }

        poli.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                textNamaPoli.setText(poli.getTable().getValueAt(poli.getTable().getSelectedRow(), 1).toString());
                regKodePoli = poli.getTable().getValueAt(poli.getTable().getSelectedRow(), 0).toString();
            }
        });

        dokter.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                textNamaDokter.setText(dokter.getTable().getValueAt(dokter.getTable().getSelectedRow(), 1).toString());
                regKodeDokter = dokter.getTable().getValueAt(dokter.getTable().getSelectedRow(), 0).toString();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanelTengah = new javax.swing.JPanel();
        jLabelRM = new javax.swing.JLabel();
        labelNoRM = new javax.swing.JLabel();
        jLabelNamaPasien = new javax.swing.JLabel();
        labelNamaPasien = new javax.swing.JLabel();
        jLabelTglLahir = new javax.swing.JLabel();
        labelTglLahir = new javax.swing.JLabel();
        jLabelPoli = new javax.swing.JLabel();
        textNamaPoli = new javax.swing.JTextField();
        btnCariPoli = new javax.swing.JButton();
        jLabelDokter = new javax.swing.JLabel();
        textNamaDokter = new javax.swing.JTextField();
        btnCariDokter = new javax.swing.JButton();
        jLabelJenisBayar = new javax.swing.JLabel();
        textNamaJenisBayar = new javax.swing.JTextField();
        btnCariJenisBayar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanelBawah = new javax.swing.JPanel();
        btnSimpan = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.BorderLayout(1, 1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 215, 255)), "PENDAFTARAN POLIKLINIK EKSEKUTIF", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Inter", 0, 24), new java.awt.Color(0, 131, 62))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 70));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 1));

        jPanelTengah.setBackground(new java.awt.Color(238, 238, 255));
        jPanelTengah.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 100, 0, 100));
        jPanelTengah.setLayout(new java.awt.GridBagLayout());

        jLabelRM.setForeground(new java.awt.Color(0, 131, 62));
        jLabelRM.setText("No. Rekam Medis :");
        jLabelRM.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabelRM.setPreferredSize(new java.awt.Dimension(180, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(jLabelRM, gridBagConstraints);

        labelNoRM.setForeground(new java.awt.Color(0, 131, 62));
        labelNoRM.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelNoRM.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelNoRM.setPreferredSize(new java.awt.Dimension(28, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(labelNoRM, gridBagConstraints);

        jLabelNamaPasien.setForeground(new java.awt.Color(0, 131, 62));
        jLabelNamaPasien.setText("Nama Pasien :");
        jLabelNamaPasien.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabelNamaPasien.setPreferredSize(new java.awt.Dimension(180, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(jLabelNamaPasien, gridBagConstraints);

        labelNamaPasien.setForeground(new java.awt.Color(0, 131, 62));
        labelNamaPasien.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelNamaPasien.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelNamaPasien.setPreferredSize(new java.awt.Dimension(28, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(labelNamaPasien, gridBagConstraints);

        jLabelTglLahir.setForeground(new java.awt.Color(0, 131, 62));
        jLabelTglLahir.setText("Tgl. Lahir :");
        jLabelTglLahir.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabelTglLahir.setPreferredSize(new java.awt.Dimension(180, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(jLabelTglLahir, gridBagConstraints);

        labelTglLahir.setForeground(new java.awt.Color(0, 131, 62));
        labelTglLahir.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelTglLahir.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        labelTglLahir.setPreferredSize(new java.awt.Dimension(28, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(labelTglLahir, gridBagConstraints);

        jLabelPoli.setForeground(new java.awt.Color(0, 131, 62));
        jLabelPoli.setText("Poli Tujuan :");
        jLabelPoli.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabelPoli.setPreferredSize(new java.awt.Dimension(180, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(jLabelPoli, gridBagConstraints);

        textNamaPoli.setEditable(false);
        textNamaPoli.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        textNamaPoli.setPreferredSize(new java.awt.Dimension(40, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(textNamaPoli, gridBagConstraints);

        btnCariPoli.setForeground(new java.awt.Color(0, 131, 62));
        btnCariPoli.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/pilih.png"))); // NOI18N
        btnCariPoli.setMnemonic('S');
        btnCariPoli.setToolTipText("Alt+S");
        btnCariPoli.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        btnCariPoli.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCariPoli.setPreferredSize(new java.awt.Dimension(40, 23));
        btnCariPoli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariPoliActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(btnCariPoli, gridBagConstraints);

        jLabelDokter.setForeground(new java.awt.Color(0, 131, 62));
        jLabelDokter.setText("Dokter Tujuan :");
        jLabelDokter.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabelDokter.setPreferredSize(new java.awt.Dimension(180, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(jLabelDokter, gridBagConstraints);

        textNamaDokter.setEditable(false);
        textNamaDokter.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        textNamaDokter.setPreferredSize(new java.awt.Dimension(40, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(textNamaDokter, gridBagConstraints);

        btnCariDokter.setForeground(new java.awt.Color(0, 131, 62));
        btnCariDokter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/pilih.png"))); // NOI18N
        btnCariDokter.setMnemonic('S');
        btnCariDokter.setToolTipText("Alt+S");
        btnCariDokter.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        btnCariDokter.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCariDokter.setPreferredSize(new java.awt.Dimension(40, 23));
        btnCariDokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariDokterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(btnCariDokter, gridBagConstraints);

        jLabelJenisBayar.setForeground(new java.awt.Color(0, 131, 62));
        jLabelJenisBayar.setText("Jenis Bayar :");
        jLabelJenisBayar.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        jLabelJenisBayar.setPreferredSize(new java.awt.Dimension(180, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(jLabelJenisBayar, gridBagConstraints);

        textNamaJenisBayar.setEditable(false);
        textNamaJenisBayar.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        textNamaJenisBayar.setPreferredSize(new java.awt.Dimension(40, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(textNamaJenisBayar, gridBagConstraints);

        btnCariJenisBayar.setForeground(new java.awt.Color(0, 131, 62));
        btnCariJenisBayar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/pilih.png"))); // NOI18N
        btnCariJenisBayar.setMnemonic('S');
        btnCariJenisBayar.setToolTipText("Alt+S");
        btnCariJenisBayar.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        btnCariJenisBayar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCariJenisBayar.setPreferredSize(new java.awt.Dimension(40, 23));
        btnCariJenisBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariJenisBayarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        jPanelTengah.add(btnCariJenisBayar, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(238, 238, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.6;
        jPanelTengah.add(jPanel2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(238, 238, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.3;
        jPanelTengah.add(jPanel3, gridBagConstraints);

        jPanel1.add(jPanelTengah, java.awt.BorderLayout.CENTER);

        jPanelBawah.setBackground(new java.awt.Color(238, 238, 255));
        jPanelBawah.setPreferredSize(new java.awt.Dimension(615, 100));

        btnSimpan.setForeground(new java.awt.Color(0, 131, 62));
        btnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/konfirmasi.png"))); // NOI18N
        btnSimpan.setMnemonic('S');
        btnSimpan.setText("Konfirmasi");
        btnSimpan.setToolTipText("Alt+S");
        btnSimpan.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        btnSimpan.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSimpan.setPreferredSize(new java.awt.Dimension(300, 45));
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        jPanelBawah.add(btnSimpan);

        btnKeluar.setForeground(new java.awt.Color(0, 131, 62));
        btnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/reset.png"))); // NOI18N
        btnKeluar.setMnemonic('K');
        btnKeluar.setText("Batal");
        btnKeluar.setToolTipText("Alt+K");
        btnKeluar.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
        btnKeluar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnKeluar.setPreferredSize(new java.awt.Dimension(300, 45));
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        jPanelBawah.add(btnKeluar);

        jPanel1.add(jPanelBawah, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed

        if (labelNoRM.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "No. RM Kosong..!!");
        } else if (regKodePoli.isBlank()) {
            JOptionPane.showMessageDialog(null, "Pilih poli terlebih dahulu..!!");
        } else if (regKodeDokter.isBlank()) {
            JOptionPane.showMessageDialog(null, "Pilih Dokter terlebih dahulu..!!");
        } else if (Sequel.cariIntegerSmc("select count(*) from reg_periksa where kd_pj = 'A09' and no_rkm_medis = ? and tgl_registrasi = current_date() and kd_poli = ? and kd_dokter = ?", labelNoRM.getText(), regKodePoli, regKodeDokter) > 0) {
            JOptionPane.showMessageDialog(null, "Maaf, anda sudah terdaftar pada hari ini dengan dokter dan poli yang sama..!!");
        } else if (Sequel.cariIntegerSmc("select count(*) from reg_periksa join kamar_inap on reg_periksa.no_rawat = kamar_inap.no_rawat where kamar_inap.stts_pulang = '-' and reg_periksa.no_rkm_medis = ?", labelNoRM.getText()) > 0) {
            JOptionPane.showMessageDialog(null, "Maaf, pasien sedang dalam masa perawatan di rawat inap..!!");
        } else {
            setNomorRegistrasi();
            updateUmurPasien();
            setStatusPasien();

            if (registerPasien()) {
                cetakRegistrasi();

                JOptionPane.showMessageDialog(null, "Berhasil!");
            }

            kosongkanInput();

            dispose();
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnCariDokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariDokterActionPerformed
        dokter.tampil(hari, regKodePoli);
        dokter.setSize(jPanel1.getWidth() - 50, jPanel1.getHeight() - 50);
        dokter.setLocationRelativeTo(jPanel2);
        dokter.setVisible(true);
    }//GEN-LAST:event_btnCariDokterActionPerformed

    private void btnCariPoliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariPoliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCariPoliActionPerformed

    private void btnCariJenisBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariJenisBayarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCariJenisBayarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRegistrasiEksekutif dialog = new DlgRegistrasiEksekutif(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCariDokter;
    private javax.swing.JButton btnCariJenisBayar;
    private javax.swing.JButton btnCariPoli;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JLabel jLabelDokter;
    private javax.swing.JLabel jLabelJenisBayar;
    private javax.swing.JLabel jLabelNamaPasien;
    private javax.swing.JLabel jLabelPoli;
    private javax.swing.JLabel jLabelRM;
    private javax.swing.JLabel jLabelTglLahir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBawah;
    private javax.swing.JPanel jPanelTengah;
    private javax.swing.JLabel labelNamaPasien;
    private javax.swing.JLabel labelNoRM;
    private javax.swing.JLabel labelTglLahir;
    private javax.swing.JTextField textNamaDokter;
    private javax.swing.JTextField textNamaJenisBayar;
    private javax.swing.JTextField textNamaPoli;
    // End of variables declaration//GEN-END:variables

    public void setPasien(String noRM) {
        labelNoRM.setText(noRM);
        tentukanHari();
        ambilDataPasien();
    }

    private void ambilDataPasien() {
        try {
            ps = koneksi.prepareStatement("select nm_pasien, tgl_lahir from pasien where no_rkm_medis = ?");
            try {
                ps.setString(1, labelNoRM.getText());

                rs = ps.executeQuery();

                if (rs.next()) {
                    labelNamaPasien.setText(rs.getString("nm_pasien"));
                    labelTglLahir.setText(formatTanggal(rs.getString("tgl_lahir")));
                }
            } catch (SQLException e) {
                System.out.println("Notif : " + e);
            } finally {
                if (rs != null) {
                    rs.close();
                }

                if (ps != null) {
                    ps.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notif : " + e);
        }
    }

    private String formatTanggal(String tanggal) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate ld = LocalDate.parse(tanggal, dtf);

        return ld.format(DateTimeFormatter.ofPattern("dd MMMM yyyy").withLocale(new Locale("ine", "id")));
    }

    private void setStatusPasien() {
        if (Sequel.cariIntegerSmc("select count(*) from reg_periksa where no_rkm_medis = ? and kd_poli = ?", labelNoRM.getText(), regKodePoli) > 0) {
            regStatusPoli = "Lama";
            regBiaya = Sequel.cariIsiSmc("select registrasilama from poliklinik where kd_poli = ? and status = '1'", regKodePoli);
        } else {
            regBiaya = Sequel.cariIsiSmc("select registrasi from poliklinik where kd_poli = ? and status = '1'", regKodePoli);
        }

        try {
            ps = koneksi.prepareStatement(
                "select " +
                "pasien.nm_pasien, concat_ws(', ', pasien.alamat, kelurahan.nm_kel, kecamatan.nm_kec, kabupaten.nm_kab) as alamat, pasien.tgl_lahir, pasien.namakeluarga, pasien.keluarga, pasien.kd_pj, " +
                "if (pasien.tgl_daftar = current_date(), 'baru', 'lama') as daftar, timestampdiff(year, pasien.tgl_lahir, curdate()) as tahun, timestampdiff(month, pasien.tgl_lahir, curdate()) - ((timestampdiff(month, pasien.tgl_lahir, curdate()) div 12) * 12) as bulan, " +
                "timestampdiff(day, date_add(date_add(pasien.tgl_lahir, interval timestampdiff(year, pasien.tgl_lahir, curdate()) year), interval timestampdiff(month, pasien.tgl_lahir, curdate()) - ((timestampdiff(month, pasien.tgl_lahir, curdate()) div 12) * 12) month), curdate()) as hari " +
                "from pasien " +
                "join kelurahan on pasien.kd_kel = kelurahan.kd_kel " +
                "join kecamatan on pasien.kd_kec = kecamatan.kd_kec " +
                "join kabupaten on pasien.kd_kab = kabupaten.kd_kab " +
                "where pasien.no_rkm_medis = ?"
            );

            try {
                ps.setString(1, labelNoRM.getText());

                rs = ps.executeQuery();

                if (rs.next()) {
                    labelNamaPasien.setText(rs.getString("nm_pasien"));
                    labelTglLahir.setText(rs.getString("tgl_lahir"));
                    pasienNamaPJ = rs.getString("namakeluarga");
                    pasienHubunganPJ = rs.getString("keluarga");
                    pasienAlamatPJ = rs.getString("alamat");
                    regStatusDaftar = rs.getString("daftar");

                    if (rs.getInt("tahun") > 0) {
                        pasienUmur = rs.getString("tahun");
                        pasienStatusUmur = "Th";
                    } else if ((rs.getInt("tahun") <= 0) && (rs.getInt("bulan") > 0)) {
                        pasienUmur = rs.getString("bulan");
                        pasienStatusUmur = "Bl";
                    } else if ((rs.getInt("tahun") <= 0) && (rs.getInt("bulan") <= 0) && (rs.getInt("hari") > 0)) {
                        pasienUmur = rs.getString("hari");
                        pasienStatusUmur = "Hr";
                    }
                }
            } catch (SQLException e) {
                System.out.println("Notif : " + e);
            } finally {
                if (rs != null) {
                    rs.close();
                }

                if (ps != null) {
                    ps.close();
                }
            }
        } catch (SQLException e) {
            System.out.println("Notif : " + e);
        }
    }

    private void updateUmurPasien() {
        Sequel.mengupdateSmc("pasien",
            "umur = CONCAT(CONCAT(CONCAT(TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()), ' Th '), CONCAT(TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) div 12) * 12), ' Bl ')), CONCAT(TIMESTAMPDIFF(DAY, DATE_ADD(DATE_ADD(tgl_lahir, INTERVAL TIMESTAMPDIFF(YEAR, tgl_lahir, CURDATE()) YEAR), INTERVAL TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, tgl_lahir, CURDATE()) div 12) * 12) MONTH), CURDATE()), ' Hr'))",
            "no_rkm_medis = ?", labelNoRM.getText()
        );
    }

    private void setNomorRegistrasi() {
        switch (URUTNOREG) {
            case "poli":
                regNoUrut = Sequel.cariIsiSmc(
                    "select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_poli = ? and tgl_registrasi = current_date()",
                    regKodePoli
                );
                break;
            case "dokter":
                regNoUrut = Sequel.cariIsiSmc(
                    "select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_dokter = ? and tgl_registrasi = current_date()",
                    regKodePoli
                );
                break;
            case "dokter + poli":
                regNoUrut = Sequel.cariIsiSmc(
                    "select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_poli = ? and kd_dokter = ? and tgl_registrasi = current_date()",
                    regKodePoli, regKodeDokter
                );
                break;
            default:
                regNoUrut = Sequel.cariIsiSmc(
                    "select lpad(ifnull(max(convert(no_reg, signed)), 0) + 1, 3, '0') from reg_periksa where kd_poli = ? and kd_dokter = ? and tgl_registrasi = current_date()",
                    regKodePoli, regKodeDokter
                );
                break;
        }

        regNoRawat = Sequel.cariIsiSmc(
            "select concat(date_format(current_date(), '%Y/%m/%d'), '/', lpad(ifnull(max(convert(right(no_rawat, 6), signed)), 0) + 1, 6, '0')) from reg_periksa where tgl_registrasi = current_date()"
        );
    }

    private void tentukanHari() {
        try {
            java.util.Date hariperiksa = new java.util.Date();
            cal.setTime(hariperiksa);
            day = cal.get(Calendar.DAY_OF_WEEK);
            switch (day) {
                case 1:
                    hari = "AKHAD";
                    break;
                case 2:
                    hari = "SENIN";
                    break;
                case 3:
                    hari = "SELASA";
                    break;
                case 4:
                    hari = "RABU";
                    break;
                case 5:
                    hari = "KAMIS";
                    break;
                case 6:
                    hari = "JUMAT";
                    break;
                case 7:
                    hari = "SABTU";
                    break;
                default:
                    break;
            }

        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
    }

    private boolean registerPasien() {
        int coba = 0, maxCoba = 5;

        System.out.println("Mencoba mendaftarkan pasien dengan no. rawat: " + regNoRawat);

        while (coba < maxCoba && (!Sequel.menyimpantfSmc("reg_periksa", null,
            regNoUrut, regNoRawat, new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()),
            Sequel.cariIsi("select current_time()"), regKodeDokter, labelNoRM.getText(), regKodePoli,
            pasienNamaPJ, pasienAlamatPJ, pasienHubunganPJ, regBiaya, "Belum", regStatusDaftar, "Ralan", "A09",
            pasienUmur, pasienStatusUmur, "Belum Bayar", regStatusPoli))) {
            setNomorRegistrasi();
            System.out.println("Mencoba mendaftarkan pasien dengan no. rawat: " + regNoRawat);

            coba++;
        }

        String isNoRawat = Sequel.cariIsiSmc("select no_rawat from reg_periksa where tgl_registrasi = current_date() and no_rkm_medis = ? and kd_poli = ? and kd_dokter = ?", labelNoRM.getText(), regKodePoli, regKodeDokter);

        if (coba == maxCoba && (isNoRawat == null || !isNoRawat.equals(regNoRawat))) {
            System.out.println("======================================================");
            System.out.println("Tidak dapat mendaftarkan pasien dengan detail berikut:");
            System.out.println("No. Rawat: " + regNoRawat);
            System.out.println("Tgl. Registrasi: " + new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()));
            System.out.println("No. Antrian: " + regNoUrut + " (Ditemukan: " + Sequel.cariIsiSmc("select no_reg from reg_periksa where no_rawat = ?", regNoRawat) + ")");
            System.out.println("No. RM: " + labelNoRM + " (Ditemukan: " + Sequel.cariIsiSmc("select no_rkm_medis from reg_periksa where no_rawat = ?", regNoRawat) + ")");
            System.out.println("Kode Dokter: " + regKodeDokter + " (Ditemukan: " + Sequel.cariIsiSmc("select kd_dokter from reg_periksa where no_rawat = ?", regNoRawat) + ")");
            System.out.println("Kode Poli: " + regKodePoli + " (Ditemukan: " + Sequel.cariIsiSmc("select kd_poli from reg_periksa where no_rawat = ?", regNoRawat) + ")");
            System.out.println("======================================================");

            return false;
        }

        return true;
    }

    private void cetakRegistrasi() {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        Map<String, Object> param = new HashMap<>();
        param.put("namars", instansiNama);
        param.put("alamatrs", instansiAlamat);
        param.put("kotars", instansiKota);
        param.put("kontakrs", instansiKontak);
        param.put("norawat", regNoRawat);

        Valid.printReport("rptBuktiRegisterAPM.jasper", PRINTERREGISTRASI, "::[ Bukti Registrasi 1 ]::", 1, param);
        Valid.MyReport("rptBuktiRegisterAPM.jasper", "report", "::[ Bukti Registrasi 1 ]::", param);
        Valid.printReport("rptBarcodeRawatAPM.jasper", PRINTERBARCODE, "::[ Barcode Perawatan ]::", 3, param);
        Valid.MyReport("rptBarcodeRawatAPM.jasper", "report", "::[ Barcode Perawatan ]::", param);

        this.setCursor(Cursor.getDefaultCursor());
    }

    private void kosongkanInput() {
        labelNoRM.setText("");
        labelNamaPasien.setText("");
        labelTglLahir.setText("");
        textNamaPoli.setText("");
        textNamaDokter.setText("");
        textNamaJenisBayar.setText("");

        hari = "";
        regNoRawat = "";
        regNoUrut = "";
        regKodeDokter = "";
        regKodePoli = "";
        regBiaya = "";
        regStatusDaftar = "Lama";
        regStatusPoli = "Baru";
        pasienUmur = "0";
        pasienStatusUmur = "Th";
        pasienNamaPJ = "-";
        pasienHubunganPJ = "-";
        pasienAlamatPJ = "-";
        instansiNama = "";
        instansiAlamat = "";
        instansiKota = "";
        instansiKontak = "";
    }
}
